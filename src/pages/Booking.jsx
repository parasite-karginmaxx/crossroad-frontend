import { useState, useEffect } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import { createBooking, getAllAdditions } from '../api/booking';
import {
  Container, Typography, TextField, Button, Snackbar, Alert, Box,
  FormControl, InputLabel, Select, MenuItem, OutlinedInput, Checkbox, ListItemText
} from '@mui/material';

export default function Booking() {
  const navigate = useNavigate();
  const searchParams = new URLSearchParams(useLocation().search);
  const roomId = searchParams.get('rooms');

  const [checkIn, setCheckIn] = useState('');
  const [checkOut, setCheckOut] = useState('');
  const [additionIds, setAdditionIds] = useState([]);
  const [allAdditions, setAllAdditions] = useState([]);
  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' });

  const showSnackbar = (message, severity = 'success') => {
    setSnackbar({ open: true, message, severity });
  };

  useEffect(() => {
    getAllAdditions()
      .then(setAllAdditions)
      .catch(() => showSnackbar('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—Å–ª—É–≥', 'error'));
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    const today = new Date().toISOString().split('T')[0];

    if (!checkIn || !checkOut || !roomId) {
      return showSnackbar('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'warning');
    }
    if (checkIn < today || checkOut < today) {
      return showSnackbar('–ù–µ–ª—å–∑—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –ø—Ä–æ—à–µ–¥—à–∏–µ –¥–∞—Ç—ã', 'warning');
    }
    if (checkOut <= checkIn) {
      return showSnackbar('–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞', 'warning');
    }

    try {
      await createBooking({ checkIn, checkOut, roomId, additionIds });
      showSnackbar('–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ!');
      setTimeout(() => navigate('/profile'), 1500);
    } catch (err) {
      console.log('–û—à–∏–±–∫–∞:', err.response);
      const msg = err?.response?.data?.message || err?.response?.data;
      if (msg === '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã') {
        showSnackbar('–í—ã —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç—É –∫–æ–º–Ω–∞—Ç—É –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã', 'error');
      } else if (msg === '–ö–æ–º–Ω–∞—Ç–∞ —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã') {
        showSnackbar('–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã', 'error');
      } else if (msg?.includes('–ü—Ä–æ—Ñ–∏–ª—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç') || msg?.includes('–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω')) {
        showSnackbar('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø–µ—Ä–µ–¥ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º', 'error');
      } else if (typeof msg === 'string') {
        showSnackbar(msg, 'error'); // üü¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ –±—ç–∫–∞
      } else {
        showSnackbar('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.', 'error');
      }
    }
  };

  return (
    <Container maxWidth="sm" sx={{ py: 5 }}>
      <Typography variant="h4" gutterBottom>–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞</Typography>
      <Box component="form" onSubmit={handleSubmit}>
        <TextField
          fullWidth
          margin="normal"
          type="date"
          label="–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞"
          value={checkIn}
          onChange={(e) => setCheckIn(e.target.value)}
          InputLabelProps={{ shrink: true }}
          required
        />
        <TextField
          fullWidth
          margin="normal"
          type="date"
          label="–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞"
          value={checkOut}
          onChange={(e) => setCheckOut(e.target.value)}
          InputLabelProps={{ shrink: true }}
          required
        />

        <FormControl fullWidth margin="normal">
          <InputLabel shrink>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏</InputLabel>
          <Select
            multiple
            value={additionIds}
            onChange={(e) => setAdditionIds(e.target.value)}
            input={<OutlinedInput notched label="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏" />}
            renderValue={(selected) =>
              allAdditions
                .filter((add) => selected.includes(add.id))
                .map((add) => add.name)
                .join(', ')
            }
          >
            {allAdditions.map((add) => (
              <MenuItem key={add.id} value={add.id}>
                <Checkbox checked={additionIds.includes(add.id)} />
                <ListItemText primary={`${add.name} ‚Äî ${add.price}‚ÇΩ`} />
              </MenuItem>
            ))}
          </Select>
        </FormControl>

        <Button type="submit" variant="contained" sx={{ mt: 2 }} fullWidth>
          –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å
        </Button>
      </Box>

      <Snackbar
        open={snackbar.open}
        autoHideDuration={4000}
        onClose={() => setSnackbar({ ...snackbar, open: false })}
      >
        <Alert
          severity={snackbar.severity}
          onClose={() => setSnackbar({ ...snackbar, open: false })}
        >
          {snackbar.message}
        </Alert>
      </Snackbar>
    </Container>
  );
}
